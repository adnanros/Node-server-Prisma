generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  name String?
  token String?
  role Role
  orders Order[]
  profile Profile? // check one-to=one relationship
}

enum Role {
  USER
  ADMIN
}

model Order {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id]) // an order must have a user
  userId Int // an order must have a user
  purchasedDate DateTime
  samplingDate DateTime
  resultDate DateTime
  orderStatus String
  paymentStatus String
  chemicalsOnChemicalAnalyses Results[] // Results is a relation model between Order and ChemicalsOnChemicalAnalyses
  chemicalAnalyses ChemicalAnalysesOnOrders[] // Redundant Data for Reports
  }

model Profile {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id]) // a profile must have a user
  userId Int @unique // It doesn't work without unique flag
  addressPart1 String
  addressPart2 String
  contactNumber Decimal // Need to check
  profileImageLink String
  country String
  city String
  postalCode String
  company String
}

model SampleCategory {
  id Int @id @default(autoincrement())
  name String
  description String
  testGroups TestGroup[]
}

model TestGroup {
  id Int @id @default(autoincrement())
  name String
  description String
  sampleCategory SampleCategory @relation(fields: [sampleCategoryId], references: [id])
  sampleCategoryId Int
  testPacks TestPacksOnTestGroups[]
}

model TestPacksOnTestGroups {
  testGroup TestGroup @relation(fields: [testGroupId], references: [id])
  testGroupId Int
  testPack TestPack @relation(fields: [testPackId], references: [id])
  testPackId Int
  @@id([testGroupId, testPackId])
}
model TestPack {
  id Int @id @default(autoincrement())
  name String
  description String
  testGroups TestPacksOnTestGroups[]
  chemicalAnalyses ChemicalAnalysesOnTestPacks []
}

model ChemicalAnalysesOnTestPacks {
  testPack TestPack @relation(fields: [testPackId], references: [id])
  testPackId Int
  chemicalAnalysis ChemicalAnalysis @relation(fields: [chemicalAnalysisId], references: [id])
  chemicalAnalysisId Int
  @@id([testPackId, chemicalAnalysisId])

}
model ChemicalAnalysis {
  id Int @id @default(autoincrement())
  name String
  description String
  price String
  discount String
  testPacks ChemicalAnalysesOnTestPacks[]
  chemicals ChemicalsOnChemicalAnalyses[]
  orders ChemicalAnalysesOnOrders[] // Redundant Data for Reports
}

model Chemical {
  id Int @id @default(autoincrement())
  name String
  description String
  chemicalAnalyses ChemicalsOnChemicalAnalyses[] 
  impacts ImpactsOnChemicals[]
}
model ChemicalsOnChemicalAnalyses {
  id Int @id @default(autoincrement())
  chemicalAnalysis ChemicalAnalysis @relation(fields: [chemicalAnalysisId], references: [id])
  chemicalAnalysisId Int
  chemical Chemical @relation(fields: [chemicalId], references: [id])
  chemicalId Int 
  orders Results[] // Results is a relation model between Order and ChemicalsOnChemicalAnalyses
  //@@id([chemicalAnalysisId, chemicalId])
}

model Results {
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  chemicalsOnChemicalAnalyses ChemicalsOnChemicalAnalyses @relation(fields: [chemicalsOnChemicalAnalysesId], references: [id])
  chemicalsOnChemicalAnalysesId Int
  detection Float @default(0)
  @@id([orderId, chemicalsOnChemicalAnalysesId])
}

// Redundant Data for Reports
model ChemicalAnalysesOnOrders { // Redundant Data for Reports
  order Order @relation(fields: [orderId], references: [id])
  orderId Int 
  chemicalAnalysis ChemicalAnalysis @relation(fields: [chemicalAnalysisId], references: [id])
  chemicalAnalysisId Int
  @@id([orderId, chemicalAnalysisId])
}

model ImpactCategory {
  id Int @id @default(autoincrement())
  name String
  description String
  impacts Impact[]
}

model Impact {
  id Int @id @default(autoincrement())
  name String
  description String
  iconLink String?
  impactCategory ImpactCategory @relation(fields: [impactCategoryId], references: [id])
  impactCategoryId Int
  chemicals ImpactsOnChemicals[]
}

model ImpactsOnChemicals {
  id Int @id @default(autoincrement())
  impact Impact @relation(fields: [impactId], references: [id])
  impactId Int
  chemical Chemical @relation(fields: [chemicalId], references: [id])
  chemicalId Int
  dose Float @default(0)
}